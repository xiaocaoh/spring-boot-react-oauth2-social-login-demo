spring:
    datasource:
        url: jdbc:mysql://45.62.122.16:3306/spring_social?useSSL=false&serverTimezone=UTC&useLegacyDatetimeCode=false
        username: root
        password: Dy@123456
      # 数据库访问配置, 使用druid数据源
        driver-class-name: com.mysql.cj.jdbc.Driver
      # 连接池配置
        initial-size: 5
        min-idle: 5
        max-active: 20
      # 连接等待超时时间
        max-wait: 30000
      # 配置检测可以关闭的空闲连接间隔时间
        time-between-eviction-runs-millis: 60000
      # 配置连接在池中的最小生存时间
        min-evictable-idle-time-millis: 300000
        validation-query: select '1' from dual
        test-while-idle: true
        test-on-borrow: false
        test-on-return: false
      # 打开PSCache，并且指定每个连接上PSCache的大小
        pool-prepared-statements: true
        max-open-prepared-statements: 20
        max-pool-prepared-statement-per-connection-size: 20
      # 配置监控统计拦截的filters, 去掉后监控界面sql无法统计, 'wall'用于防火墙
        filters: stat,wall
      # Spring监控AOP切入点，如x.y.z.service.*,配置多个英文逗号分隔
        aop-patterns: com.springboot.servie.*
      # WebStatFilter配置
        web-stat-filter:
          enabled: true
          # 添加过滤规则
          url-pattern: /*
          # 忽略过滤的格式
          exclusions: '*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*'
      # StatViewServlet配置
        stat-view-servlet:
          enabled: true
          # 访问路径为/druid时，跳转到StatViewServlet
          url-pattern: /druid/*
          # 是否能够重置数据
          reset-enable: false
          # 需要账号密码才能访问控制台
          login-username: druid
          login-password: druid123
          # IP白名单
          # allow: chng.qny.core.code.generator
          #　IP黑名单（共同存在时，deny优先于allow）
          # deny: 192.168.1.218
      # 配置StatFilter
        filter:
          stat:
            log-slow-sql: true

    jpa:
        show-sql: true
        hibernate:
            ddl-auto: update
            naming-strategy: org.hibernate.cfg.ImprovedNamingStrategy
        properties:
            hibernate:
                dialect: org.hibernate.dialect.MySQL5InnoDBDialect
    security:
      oauth2:
        client:
          registration:
            google:
              clientId: 36933357862-4308uegej069gs4ggmflaga95erg0627.apps.googleusercontent.com
#              5014057553-8gm9um6vnli3cle5rgigcdjpdrid14m9.apps.googleusercontent.com
              clientSecret: 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
#              tWZKVLxaD_ARWsriiiUFYoIk
#              redirectUri: "{baseUrl}/api/oauth2/redirect/{registrationId}"
              redirectUri: "https://www.tmmtmm.online/api/oauth2/redirect/{registrationId}"
              scope:
                - email
                - profile
            facebook:
              clientId: 1630380790958823
#              121189305185277
              clientSecret: 698eb0d36ef2f01c25119caf5c4fa352
#              42ffe5aa7379e8326387e0fe16f34132
              redirectUri: "{baseUrl}/api/oauth2/redirect/{registrationId}"
              scope:
                - email
                - public_profile
            github:
              clientId: d3e47fc2ddd966fa4352
              clientSecret: 3bc0f6b8332f93076354c2a5bada2f5a05aea60d
              redirectUri: "{baseUrl}/api/oauth2/redirect/{registrationId}"
              scope:
                - user:email
                - read:user
          provider:
            facebook:
              authorizationUri: https://www.facebook.com/v3.0/dialog/oauth
              tokenUri: https://graph.facebook.com/v3.0/oauth/access_token
              userInfoUri: https://graph.facebook.com/v3.0/me?fields=id,first_name,middle_name,last_name,name,email,verified,is_verified,picture.width(250).height(250)
app:
  auth:
    tokenSecret: 04ca023b39512e46d0c2cf4b48d5aac61d34302994c87ed4eff225dcf3b0a218739f3897051a057f9b846a69ea2927a587044164b7bae5e1306219d50b588cb1
    tokenExpirationMsec: 864000000
  cors:
    allowedOrigins: http://45.62.122.16:3000,http://45.62.122.16:8080,https://www.tmmtmm.online,https://www.tmmtmm.online/api,http://localhost:8080
  oauth2:
    # After successfully authenticating with the OAuth2 Provider,
    # we'll be generating an auth token for the user and sending the token to the
    # redirectUri mentioned by the client in the /oauth2/authorize request.
    # We're not using cookies because they won't work well in mobile clients.
    authorizedRedirectUris:
      - https://www.tmmtmm.online/oauth2/redirect
      - https://www.tmmtmm.online/api/oauth2/redirect
      - myandroidapp://oauth2/redirect
      - myiosapp://oauth2/redirect

google:
  userinfo: https://www.googleapis.com/oauth2/v2/userinfo?access_token=
  token: https://oauth2.googleapis.com/token